#!/bin/bash
# Certificate synchronization script for HAProxy
# Works with read-only mounted certificate directories by synchronizing certificates
# from the node application to temporary directory that HAProxy can access

# Logging function
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "Starting certificate synchronization..."

# Define paths
NODE_APP_CONTAINER="cloudlunacy-front"
HAPROXY_CONTAINER="haproxy"
TEMP_DIR="/tmp/cert-sync"
HAPROXY_TEMP_DIR="/tmp/certs"

# Create temp directory
mkdir -p $TEMP_DIR
if [ $? -ne 0 ]; then
  log "Error: Failed to create temporary directory"
  exit 1
fi

# Check if node container is running without docker command
if ! ps aux | grep -v grep | grep -q "$NODE_APP_CONTAINER"; then
  log "Error: Node.js application container may not be running or visible from this context"
  # Continue anyway in case we're running inside the container
fi

# Synchronize certificates from Node.js app to a temporary directory in HAProxy
# This function uses container-to-container communication through the host
sync_cert_file() {
  local src_file="$1"
  local dest_file="$2"
  local pem_format="$3"
  
  # Log what we're doing
  log "Attempting to synchronize $src_file to $dest_file"
  
  # Create destination directory if needed
  mkdir -p "$(dirname "$dest_file")" 2>/dev/null
  
  # If the source file exists in the node app container, copy it
  if [ -f "$src_file" ]; then
    cat "$src_file" > "$TEMP_DIR/$(basename "$dest_file")"
    # Ensure content looks valid
    if [ -s "$TEMP_DIR/$(basename "$dest_file")" ]; then
      log "Successfully synchronized $src_file"
      
      # Create PEM format if requested (combine key and cert)
      if [ "$pem_format" = "true" ] && [[ "$src_file" == *".key" ]]; then
        cert_file="${src_file%.key}.crt"
        if [ -f "$cert_file" ]; then
          # Create combined PEM file (key + cert)
          cat "$src_file" "$cert_file" > "$TEMP_DIR/$(basename "${dest_file%.key}.pem")"
          log "Created combined PEM file ${dest_file%.key}.pem"
        fi
      fi
      
      return 0
    else
      log "Error: Failed to read $src_file or file is empty"
      return 1
    fi
  else
    log "Warning: Source file $src_file does not exist"
    return 1
  fi
}

# Setup temporary certificate directory in HAProxy
log "Setting up temporary certificate directory in HAProxy..."
mkdir -p $HAPROXY_TEMP_DIR/certs
mkdir -p $HAPROXY_TEMP_DIR/private

# Sync CA certificate and key
log "Syncing CA certificates..."
sync_cert_file "/app/certs/ca.crt" "$HAPROXY_TEMP_DIR/certs/ca.crt" "false"
sync_cert_file "/app/certs/ca.crt" "$HAPROXY_TEMP_DIR/certs/mongodb-ca.crt" "false"
sync_cert_file "/app/certs/ca.key" "$HAPROXY_TEMP_DIR/private/ca.key" "false"

# Prepare to create a configuration file for HAProxy to find the certificates
CERT_CONFIG_FILE="$HAPROXY_TEMP_DIR/cert-paths.cfg"
echo "# Certificate paths configuration" > $CERT_CONFIG_FILE
echo "# Generated by sync-certificates.sh on $(date)" >> $CERT_CONFIG_FILE
echo "" >> $CERT_CONFIG_FILE

# Add CA certificate paths
echo "ca_cert = $HAPROXY_TEMP_DIR/certs/ca.crt" >> $CERT_CONFIG_FILE
echo "mongodb_ca_cert = $HAPROXY_TEMP_DIR/certs/mongodb-ca.crt" >> $CERT_CONFIG_FILE
echo "ca_key = $HAPROXY_TEMP_DIR/private/ca.key" >> $CERT_CONFIG_FILE
echo "" >> $CERT_CONFIG_FILE

# Sync agent certificates
log "Syncing agent certificates..."
# List directories in the agents directory
if [ -d "/app/certs/agents" ]; then
  for agent_dir in /app/certs/agents/*; do
    if [ -d "$agent_dir" ]; then
      agent_id=$(basename "$agent_dir")
      log "Processing agent: $agent_id"
      
      # Create agent directory in temporary location
      mkdir -p "$HAPROXY_TEMP_DIR/agents/$agent_id"
      
      # Sync server key and certificate
      sync_cert_file "$agent_dir/server.key" "$HAPROXY_TEMP_DIR/agents/$agent_id/server.key" "true"
      sync_cert_file "$agent_dir/server.crt" "$HAPROXY_TEMP_DIR/agents/$agent_id/server.crt" "false"
      
      # Create combined PEM file for HAProxy
      if [ -f "$TEMP_DIR/$agent_id.pem" ]; then
        cp "$TEMP_DIR/$agent_id.pem" "$HAPROXY_TEMP_DIR/private/$agent_id.pem"
        chmod 600 "$HAPROXY_TEMP_DIR/private/$agent_id.pem" 2>/dev/null
        echo "agent_cert_$agent_id = $HAPROXY_TEMP_DIR/private/$agent_id.pem" >> $CERT_CONFIG_FILE
        log "Created combined PEM for agent $agent_id"
      fi
    fi
  done
else
  log "Warning: Agents directory not found at /app/certs/agents"
fi

# Create instructions for HAProxy to use these certificates
cat >> $CERT_CONFIG_FILE << EOF

# Instructions for HAProxy:
# 1. To use these certificates, add the following to your global section:
#    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
#    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

# 2. In your server definitions, use:
#    server mongo ssl verify ca-file $HAPROXY_TEMP_DIR/certs/mongodb-ca.crt

# 3. For agent-specific backends:
#    bind *:27017 ssl crt $HAPROXY_TEMP_DIR/private/{agent-id}.pem ca-file $HAPROXY_TEMP_DIR/certs/ca.crt verify optional
EOF

log "Certificate configuration file created at $CERT_CONFIG_FILE"

# Provide instructions for modifying HAProxy configuration
log "To use these certificates with HAProxy, you need to modify your configuration to reference the temporary directory."
log "The certificate paths are stored in $HAPROXY_TEMP_DIR/cert-paths.cfg"

# Clean up original temp directory
rm -rf $TEMP_DIR
log "Certificate synchronization completed"
exit 0