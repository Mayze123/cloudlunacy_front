# Dynamic configuration rules previously in traefik.yml

# -------------------------------
# HTTP Dynamic Configuration
# -------------------------------
http:
  routers:
    # Healthcheck endpoint on the "traefik" entryPoint (if you have one defined)
    # traefik-healthcheck:
    #   entryPoints:
    #     - traefik
    #   rule: Path(`/ping`)
    #   service: api@internal

    # Secure dashboard with basic auth on HTTPS
    # This is usually handled by labels on the traefik service itself
    # or via static config, but keeping here if needed as dynamic rule
    # dashboard:
    #   entryPoints:
    #     - websecure
    #   rule: Host(`traefik.cloudlunacy.uk`)
    #   service: api@internal
    #   middlewares:
    #     - auth-admin # Ensure this middleware is defined
    #   tls: {}

  middlewares:
    # Basic auth for dashboard access (ensure user/pass is secure)
    auth-admin:
      basicAuth:
        users:
          - "admin:$apr1$ruca84Hq$mbjdMZBAG.KWn7vfN/SNK/" # CHANGE THIS!

    # Default redirect from HTTP to HTTPS (Now handled globally in static config)
    # web-to-websecure:
    #   redirectScheme:
    #     scheme: https
    #     permanent: true

    # Compression for HTTP responses
    compress:
      compress: {}

    # Security headers to harden HTTP
    secure-headers:
      headers:
        frameDeny: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 31536000

    # CORS policy for your applications
    cors-headers:
      headers:
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        # Be more specific with origins if possible
        accessControlAllowOriginList:
          - "https://*.cloudlunacy.uk"
          - "https://*.apps.cloudlunacy.uk"
          - "http://localhost:3000" # Example for local development
        accessControlAllowCredentials: true
        accessControlMaxAge: 100
        addVaryHeader: true

  services:
    # Default backend service (usually defined by Docker labels on the service)
    # node-app-service:
    #   loadBalancer:
    #     servers:
    #       - url: http://node-app:3005

# -------------------------------
# TCP Dynamic Configuration
# -------------------------------
tcp:
  routers:
    mongodb:
      entryPoints:
        - mongodb # Ensure this entrypoint is defined in static config
      rule: HostSNI(`*`)
      # rule: HostSNI(`${MONGO_DOMAIN:-mongodb.cloudlunacy.uk}`)
      service: mongodb-service
      tls:
        passthrough: true # Use passthrough for MongoDB

  services:
    mongodb-service:
      loadBalancer:
        # Point to the actual MongoDB service container name and port
        # Assuming you have a mongo service named 'mongo' running on the default port
        # servers:
        #   - address: "mongo:27017"
        # If connecting to host mongo (less common in prod): - address: "host.docker.internal:27017"
        # Using 127.0.0.1:27017 implies mongo is running directly on the Traefik host machine, which is unlikely.
        # Let's assume it should point to a container named 'mongo' or similar.
        # Placeholder - adjust based on your actual MongoDB setup:
        servers:
          - address: "mongo:27017" # Replace 'mongo' if your service is named differently
