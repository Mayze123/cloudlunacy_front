# HAProxy Configuration for CloudLunacy Front Server
global
    log stdout format raw local0 info
    log stderr format raw local1 notice
    stats socket /tmp/haproxy.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    maxconn 20000
    
    # Enable Data Plane API socket
    stats socket /var/run/haproxy.sock mode 666 level admin expose-fd listeners
    stats timeout 30s

defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

# Rate limiting stick tables - each with unique name
frontend fe_limits
    bind :10001
    mode http
    http-response deny
    
    # IP-based tracking table (removed duplicate store options)
    stick-table type ip size 200k expire 1m store gpc0,gpc1

# Hostname tracking table
frontend fe_host_track
    bind :10002
    mode http
    http-response deny
    
    # Hostname tracking table (removed duplicate store options)
    stick-table type string len 128 size 10k expire 1h store gpc0,gpc1

# Bot tracking table
frontend fe_bot_track
    bind :10003
    mode http
    http-response deny
    
    # Bot tracking table
    stick-table type string len 128 size 10k expire 1d store gpc0,gpc1

# Data Plane API user list
userlist dataplaneapi
    user ${HAPROXY_API_USER:-admin} insecure-password ${HAPROXY_API_PASS:-admin}

# Stats page
frontend stats
    bind *:8081
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth admin:admin_password
    stats admin if TRUE
    
    # Enhanced monitoring features
    stats show-legends
    stats show-node
    stats show-desc "CloudLunacy HAProxy Statistics"
    
    # Add Prometheus metrics endpoint
    http-request use-service prometheus-exporter if { path /metrics }
    
    # Add health check endpoint
    monitor-uri /health
    
    # JSON stats can be accessed via API instead of direct stats parameter
    # CSV stats for historical data collection can be done via API
    
    # Only allow access from specific IPs - replace with your actual IPs
    acl internal_networks src 127.0.0.1 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
    http-request deny unless internal_networks

# Frontend for HTTP traffic
frontend http-in
    bind *:80
    mode http
    option forwardfor
    
    # Rate limiting - track client IPs (using external table)
    stick-table type ip size 200k expire 30m store gpc0
    
    # Mark abusive IPs and deny
    http-request track-sc0 src
    
    # Rate limiting rules
    # 1. Detect high rate clients (more than 100 requests in 10s)
    acl abuse_10s sc0_http_req_rate(fe_limits) gt 100
    # 2. Detect high rate clients (more than 500 requests in 1m)
    acl abuse_1m sc0_http_req_rate(fe_limits) gt 500
    # 3. Global flag for previously marked abusers
    acl abuse_mark sc0_get_gpc0(http-in) gt 0
    
    # Mark and deny abusers
    http-request sc-inc-gpc0(0) if abuse_10s || abuse_1m
    http-request deny if abuse_mark
    
    # Add HTTP to HTTPS redirection (after processing rate limiting)
    redirect scheme https code 301 if !{ ssl_fc }
    
    default_backend node-app-backend
    
# Backend for Node.js app
backend node-app-backend
    mode http
    option httpchk GET /health
    http-check expect status 200
    default-server inter 5s fall 5 rise 2 slowstart 30s
    timeout connect 5s
    timeout server 30s
    retries 3
    
    # Improved logging for troubleshooting
    option log-health-checks
    
    # Retry on connection failures
    option redispatch
    
    # Add error file for when backend is down
    errorfile 503 /etc/haproxy/errors/503.http
    
    # Add the server with additional options for reliability
    # Reduced check interval for faster recovery
    # Added on-marked-down shutdown-sessions to clean up when unavailable
    server node_app node-app:3005 check maxconn 100 on-marked-down shutdown-sessions weight 100 check inter 3s
    
    # Return a 200 OK status for health check requests when all servers are down
    # This prevents the entire backend from being marked as down
    http-request return status 200 content-type "text/plain" string "Service Maintenance" if { nbsrv(node-app-backend) eq 0 } { path /health }

# TCP frontend for dynamic routing of MongoDB traffic
frontend tcp-in
    # This is the main entry point for MongoDB traffic
    bind *:27017
    mode tcp
    option tcplog
    
    # Enhanced logging for MongoDB traffic
    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq"
    
    # Use ACLs for routing based on hostnames (SNI when SSL is used)
    # This will be populated dynamically by the HAProxy service
    # Example: acl host-agent123-mongo hdr(host) -i agent123.mongodb.cloudlunacy.uk
    
    # Default route to mongodb_default backend if no specific routing matches
    default_backend mongodb_default

# MongoDB Backend
backend mongodb_default
    mode tcp
    balance roundrobin
    # Server entries will be added dynamically by the HAProxy manager
    # Example: server mongodb-agent-123 1.2.3.4:27017 check

# Note: The Data Plane API is now configured via dataplaneapi.yml
# and uses the userlist above for authentication
